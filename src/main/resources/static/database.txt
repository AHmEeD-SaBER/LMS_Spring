CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('ADMIN', 'INSTRUCTOR', 'STUDENT') NOT NULL
);
CREATE TABLE courses (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    duration VARCHAR(100),
    instructor_id BIGINT NOT NULL,
    FOREIGN KEY (instructor_id) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE lessons (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT, -- Could store file paths or URLs
    course_id BIGINT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);
CREATE TABLE attendance (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    otp VARCHAR(20) NOT NULL,
    lesson_id BIGINT NOT NULL,
    student_id BIGINT NOT NULL,
    present BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (lesson_id) REFERENCES lessons(id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE assessments (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    type ENUM('QUIZ', 'ASSIGNMENT') NOT NULL,
    course_id BIGINT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);
CREATE TABLE questions (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    text TEXT NOT NULL,
    type ENUM('MCQ', 'TRUE_FALSE', 'SHORT_ANSWER') NOT NULL,
    options TEXT, -- Store options as a JSON array for MCQ
    correct_answer TEXT,
    assessment_id BIGINT NOT NULL,
    FOREIGN KEY (assessment_id) REFERENCES assessments(id) ON DELETE CASCADE
);
CREATE TABLE submissions (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    file_path TEXT, -- Path to the submitted file
    score DOUBLE,
    status ENUM('SUBMITTED', 'GRADED', 'PENDING_REVIEW') NOT NULL,
    student_id BIGINT NOT NULL,
    assessment_id BIGINT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (assessment_id) REFERENCES assessments(id) ON DELETE CASCADE
);
CREATE TABLE enrolled_courses (
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, course_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);
CREATE TABLE notifications (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    user_id BIGINT NOT NULL,
    type ENUM('ENROLLMENT', 'GRADING', 'GENERAL', 'REMINDER') NOT NULL, -- Notification type
    metadata JSON DEFAULT NULL,       -- Optional data (e.g., links, IDs)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_user_role ON users(role);
CREATE INDEX idx_course_instructor ON courses(instructor_id);
CREATE INDEX idx_lesson_course ON lessons(course_id);
CREATE INDEX idx_attendance_lesson ON attendance(lesson_id);
CREATE INDEX idx_attendance_student ON attendance(student_id);
CREATE INDEX idx_assessment_course ON assessments(course_id);
CREATE INDEX idx_question_assessment ON questions(assessment_id);
CREATE INDEX idx_submission_student ON submissions(student_id);
CREATE INDEX idx_submission_assessment ON submissions(assessment_id);
